name: Build JS-Board firmware images

on: [push]

env:
  # Upload to AWS uses OIDC for federated auth:
  # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
  S3_PATH: js-board/images
  S3_REGION: us-east-2
  AWS_ROLE: arn:aws:iam::635201719205:role/GithubActionsJSBoard

permissions:
  id-token: write
  contents: read

jobs:
  # build-image customizes the base image by adding the sensorgnome software
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: .

      - name: Configure AWS Credentials
        # See https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}
          role-session-name: GithubActionsJSBoard
          aws-region: ${{ env.S3_REGION }}

      # - name: Build image
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     image: tvoneicken/moddable:latest
      #     options: -v ${{github.workspace}}:/usr/src/js-board
      #     run: |
      #       cd /usr/src/js-board
      #       ./compile

      - name: Fake image for upload testing purposes (comment out the actual build step)
        run: |
          mkdir -p build/bin
          echo "bootloader" > build/bin/bootloader.bin
          echo "partition" > build/bin/partition-table.bin
          mkdir types
          touch types/foo.d.ts
          echo '{}' >manifest-js-board.json
      
      - run: ls -lsR manifest* build/bin types

      - name: Create artifacts directory with manifest ready to upload
        run: ./mk-flasher-manifest.sh ${{github.ref}}

      # Upload github artifacts for debugging purposes
      # (commented out to save 1min of workflow run time)
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{env.SG_ZIP}}
      #     path: images/${{env.SG_ZIP}}

      - name: Upload image directory to AWS S3 repo
        run: |
          aws s3 sync --no-progress dist s3://${{env.S3_PATH}}

      - name: Create annotation with link to images on S3
        run: |
          VERSION=$(grep version dist/*/manigfest-flasher.json | sed -e 's/"$//' -e 's/.*"//')
          echo $VERSION
          echo "::notice title=Version::$VERSION "

      - run: |
          S3=${S3_PATH/\//.s3.amazonaws.com\/}
          MANIFEST=$(echo dist/*/manifest-flasher.json | sed -e 's/dist/images/')
          echo "https://$S3/$MANIFEST"
          echo "::notice title=Manifest::https://$S3/$MANIFEST "
